import fs from 'fs/promises';
import path from 'path';
import { getPlaiceholder } from 'plaiceholder';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const imagesRoot = path.join(process.cwd(), 'public', 'images');
const outputDir = path.join(process.cwd(), 'lib');
const outputFile = path.join(outputDir, 'placeholders.js');

async function getAllImagePaths(dir) {
  const dirents = await fs.readdir(dir, { withFileTypes: true });
  const files = await Promise.all(
    dirents.map((dirent) => {
      const res = path.resolve(dir, dirent.name);
      return dirent.isDirectory() ? getAllImagePaths(res) : res;
    })
  );
  return Array.prototype.concat(...files).filter((file) =>
    /\.(jpe?g|png|webp|avif)$/i.test(file)
  );
}

async function generatePlaceholders() {
  // ✅ Ensure output directory exists
  await fs.mkdir(outputDir, { recursive: true });

  const imagePaths = await getAllImagePaths(imagesRoot);
  const entries = [];

  for (const fullImagePath of imagePaths) {
    const buffer = await fs.readFile(fullImagePath);
    const { base64 } = await getPlaiceholder(buffer);

    const publicPath = fullImagePath
      .replace(path.join(process.cwd(), 'public'), '')
      .replace(/\\/g, '/'); // fix Windows path slashes

    entries.push(`  "${publicPath}": "${base64}"`);
  }

  const output = `// Generated by scripts/generate-placeholders.mjs
const placeholders = {
${entries.join(',\n')}
};

export default placeholders;
`;

  await fs.writeFile(outputFile, output);
  console.log(`✅ Placeholders generated: ${entries.length} images`);
}

generatePlaceholders().catch(console.error);
